"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const query_for_single_parser_1 = require("../query-for-single-parser");
const validation_error_1 = require("../../errors/validation.error");
(0, globals_1.describe)('QueryForSingleParser.prototype.make', () => {
    (0, globals_1.test)('callable', () => {
        (0, globals_1.expect)(query_for_single_parser_1.QueryForSingleParser.prototype.make).toBeDefined();
        (0, globals_1.expect)(typeof query_for_single_parser_1.QueryForSingleParser.prototype.make).toBe('function');
    });
    (0, globals_1.test)('return promise', () => {
        (0, globals_1.expect)(new query_for_single_parser_1.QueryForSingleParser().make({})).toBeInstanceOf(Promise);
    });
    // include
    (0, globals_1.describe)('include', () => {
        (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_single_parser_1.QueryForSingleParser().make({})).resolves.toEqual(globals_1.expect.objectContaining({
                include: [],
            }));
        }));
        (0, globals_1.test)('must be a string', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_single_parser_1.QueryForSingleParser().make({ include: [1, 2, 3] })).rejects.toThrow(validation_error_1.ValidationError);
            yield (0, globals_1.expect)(new query_for_single_parser_1.QueryForSingleParser().make({ include: [1, 2, 3] })).rejects.toThrow('include must be a string');
        }));
        (0, globals_1.test)('return include', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_single_parser_1.QueryForSingleParser().make({
                include: 'project,articles',
            })).resolves.toEqual(globals_1.expect.objectContaining({
                include: ['project', 'articles'],
            }));
        }));
    });
});
