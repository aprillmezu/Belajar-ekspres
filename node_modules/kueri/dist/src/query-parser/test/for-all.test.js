"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const query_for_all_parser_1 = require("../query-for-all-parser");
const validation_error_1 = require("../../errors/validation.error");
(0, globals_1.describe)('QueryForAllParser.prototype.make', () => {
    (0, globals_1.test)('callable', () => {
        (0, globals_1.expect)(query_for_all_parser_1.QueryForAllParser.prototype.make).toBeDefined();
        (0, globals_1.expect)(typeof query_for_all_parser_1.QueryForAllParser.prototype.make).toBe('function');
    });
    (0, globals_1.test)('return promise', () => {
        (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({})).toBeInstanceOf(Promise);
    });
    // page
    (0, globals_1.describe)('page', () => {
        (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({})).resolves.toEqual(globals_1.expect.objectContaining({
                page: {
                    number: 1,
                    size: 10,
                },
            }));
        }));
        (0, globals_1.test)('must be an object', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                page: 'invalid',
            })).rejects.toThrow(validation_error_1.ValidationError);
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                page: 'invalid',
            })).rejects.toThrow('page must be an object');
        }));
        // page number
        (0, globals_1.describe)('page.number', () => {
            (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {},
                })).resolves.toEqual(globals_1.expect.objectContaining({
                    page: {
                        number: 1,
                        size: 10,
                    },
                }));
            }));
            (0, globals_1.test)('must be a number', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        number: 'test',
                    },
                })).rejects.toThrow(validation_error_1.ValidationError);
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        number: 'test',
                    },
                })).rejects.toThrow('page number must be a number');
            }));
            (0, globals_1.test)('must be a positive number', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        number: -5,
                    },
                })).rejects.toThrow(validation_error_1.ValidationError);
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        number: -5,
                    },
                })).rejects.toThrow('page number must be a positive number');
            }));
            (0, globals_1.test)('return page number', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        number: 5,
                    },
                })).resolves.toEqual(globals_1.expect.objectContaining({
                    page: {
                        number: 5,
                        size: 10,
                    },
                }));
            }));
        });
        // page suze
        (0, globals_1.describe)('page.size', () => {
            (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {},
                })).resolves.toEqual(globals_1.expect.objectContaining({
                    page: {
                        number: 1,
                        size: 10,
                    },
                }));
            }));
            (0, globals_1.test)('must be a number', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        size: 'test',
                    },
                })).rejects.toThrow(validation_error_1.ValidationError);
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        size: 'test',
                    },
                })).rejects.toThrow('page size must be a number');
            }));
            (0, globals_1.test)('must be a positive number', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        size: -5,
                    },
                })).rejects.toThrow(validation_error_1.ValidationError);
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        size: -5,
                    },
                })).rejects.toThrow('page size must be a positive number');
            }));
            (0, globals_1.test)('return page size', () => __awaiter(void 0, void 0, void 0, function* () {
                yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                    page: {
                        size: 5,
                    },
                })).resolves.toEqual(globals_1.expect.objectContaining({
                    page: {
                        size: 5,
                        number: 1,
                    },
                }));
            }));
        });
    });
    // filter
    (0, globals_1.describe)('filter', () => {
        (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                filter: {},
            })).resolves.toEqual(globals_1.expect.objectContaining({
                filter: {},
            }));
        }));
        (0, globals_1.test)('must be an object', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                filter: 'invalid',
            })).rejects.toThrow(validation_error_1.ValidationError);
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                filter: 'invalid',
            })).rejects.toThrow('filter must be an object');
        }));
        (0, globals_1.test)('return filter', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                filter: { name: 'test' },
            })).resolves.toEqual(globals_1.expect.objectContaining({
                filter: {
                    name: 'test',
                },
            }));
        }));
    });
    // sort
    (0, globals_1.describe)('sort', () => {
        (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({})).resolves.toEqual(globals_1.expect.objectContaining({
                sort: {},
            }));
        }));
        (0, globals_1.test)('must be a string', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({ sort: [1, 2, 3] })).rejects.toThrow(validation_error_1.ValidationError);
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({ sort: [1, 2, 3] })).rejects.toThrow('sort must be a string');
        }));
        (0, globals_1.test)('return sort', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                sort: '-name,age',
            })).resolves.toEqual(globals_1.expect.objectContaining({
                sort: {
                    name: 'desc',
                    age: 'asc',
                },
            }));
        }));
    });
    // include
    (0, globals_1.describe)('include', () => {
        (0, globals_1.test)('return default', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({})).resolves.toEqual(globals_1.expect.objectContaining({
                include: [],
            }));
        }));
        (0, globals_1.test)('must be a string', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({ include: [1, 2, 3] })).rejects.toThrow(validation_error_1.ValidationError);
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({ include: [1, 2, 3] })).rejects.toThrow('include must be a string');
        }));
        (0, globals_1.test)('return include', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(new query_for_all_parser_1.QueryForAllParser().make({
                include: 'project,articles',
            })).resolves.toEqual(globals_1.expect.objectContaining({
                include: ['project', 'articles'],
            }));
        }));
    });
});
