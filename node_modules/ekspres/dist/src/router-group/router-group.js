"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterGroup = void 0;
const express_1 = require("express");
const router_group_error_1 = require("../errors/router-group.error");
class RouterGroup {
    constructor() {
        this.handlers = [];
    }
    make() {
        if (!this.handlers.length) {
            throw new router_group_error_1.RouterGroupError({
                name: 'NO_HANDLER',
                message: 'No handler found',
            });
        }
        const router = (0, express_1.Router)();
        this.handlers.forEach((handler) => {
            var _a;
            const resolver = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return res.json(yield handler.handler({
                        body: req.body,
                        query: req.query,
                        params: req.params,
                    }));
                }
                catch (err) {
                    next(err);
                }
            });
            router[handler.method](handler.path, [
                ...((_a = handler.middlewares) !== null && _a !== void 0 ? _a : []),
                resolver,
            ]);
        });
        return router;
    }
    handle(routeHandler) {
        this.handlers.push(routeHandler);
        return this;
    }
}
exports.RouterGroup = RouterGroup;
