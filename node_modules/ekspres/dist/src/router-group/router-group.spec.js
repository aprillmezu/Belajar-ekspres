"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const router_group_1 = require("./router-group");
const router_group_error_1 = require("../errors/router-group.error");
const app_1 = require("../app/app");
const supertest_1 = __importDefault(require("supertest"));
const http_error_1 = require("../errors/http.error");
(0, globals_1.describe)('router group', () => {
    (0, globals_1.describe)('make', () => {
        (0, globals_1.test)('throw if no handler', () => {
            const router = new router_group_1.RouterGroup();
            (0, globals_1.expect)(() => router.make()).toThrow(router_group_error_1.RouterGroupError);
            (0, globals_1.expect)(() => router.make()).toThrow('No handler found');
        });
        (0, globals_1.test)('no throw if any handler', () => {
            const router = new router_group_1.RouterGroup();
            router.handle({
                path: '/',
                method: 'get',
                handler: () => __awaiter(void 0, void 0, void 0, function* () { return 'OK'; }),
            });
            (0, globals_1.expect)(() => router.make()).not.toThrow(router_group_error_1.RouterGroupError);
        });
        (0, globals_1.test)('return router', () => {
            const router = new router_group_1.RouterGroup();
            router
                .handle({
                path: '/',
                method: 'get',
                handler: () => __awaiter(void 0, void 0, void 0, function* () { return 'OK'; }),
            })
                .handle({
                path: '/',
                method: 'post',
                handler: () => __awaiter(void 0, void 0, void 0, function* () { return 'OK'; }),
            });
            (0, globals_1.expect)(typeof router.make()).toBe('function');
            (0, globals_1.expect)(router.make().stack).toHaveLength(2);
        });
    });
    (0, globals_1.describe)('handler', () => {
        (0, globals_1.test)('called', () => __awaiter(void 0, void 0, void 0, function* () {
            const router = new router_group_1.RouterGroup();
            const app = new app_1.App();
            const handler = globals_1.jest.fn().mockResolvedValue('Ok');
            router
                .handle({
                path: '/',
                method: 'get',
                handler,
            })
                .handle({
                path: '/',
                method: 'post',
                handler,
            })
                .handle({
                path: '/',
                method: 'patch',
                handler,
            })
                .handle({
                path: '/',
                method: 'delete',
                handler,
            });
            app.setRoutes([router.make()]);
            yield (0, supertest_1.default)(app.getServer()).get('/').expect(200);
            yield (0, supertest_1.default)(app.getServer()).post('/').expect(200);
            yield (0, supertest_1.default)(app.getServer()).patch('/').expect(200);
            yield (0, supertest_1.default)(app.getServer()).delete('/').expect(200);
            (0, globals_1.expect)(handler).toHaveBeenCalledTimes(4);
        }));
        (0, globals_1.test)('resolved value', () => __awaiter(void 0, void 0, void 0, function* () {
            const router = new router_group_1.RouterGroup();
            const app = new app_1.App();
            const handler = globals_1.jest.fn().mockResolvedValue('Ok');
            router.handle({
                path: '/',
                method: 'get',
                handler,
            });
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer()).get('/').expect(200);
            (0, globals_1.expect)(res.body).toEqual('Ok');
        }));
    });
    (0, globals_1.describe)('middleware', () => {
        (0, globals_1.test)('handler called', () => __awaiter(void 0, void 0, void 0, function* () {
            const router = new router_group_1.RouterGroup();
            const app = new app_1.App();
            const middlewares = [
                globals_1.jest.fn((req, res, next) => next()),
                globals_1.jest.fn((req, res, next) => next()),
            ];
            router.handle({
                path: '/',
                method: 'get',
                middlewares,
                handler: () => __awaiter(void 0, void 0, void 0, function* () { return 'Ok'; }),
            });
            app.setRoutes([router.make()]);
            yield (0, supertest_1.default)(app.getServer()).get('/').expect(200);
            (0, globals_1.expect)(middlewares[0]).toHaveBeenCalled();
            (0, globals_1.expect)(middlewares[1]).toHaveBeenCalled();
        }));
    });
    (0, globals_1.describe)('handle error', () => {
        (0, globals_1.test)('internal server error', () => __awaiter(void 0, void 0, void 0, function* () {
            const router = new router_group_1.RouterGroup();
            const app = new app_1.App();
            const handler = globals_1.jest
                .fn()
                .mockRejectedValue(new Error('Something Error'));
            router.handle({
                path: '/',
                method: 'get',
                handler,
            });
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer()).get('/').expect(500);
            const errorRes = {
                name: 'Internal Server Error',
                message: 'Something Error',
                status: 500,
            };
            (0, globals_1.expect)(res.body).toEqual(errorRes);
        }));
        (0, globals_1.test)('http error', () => __awaiter(void 0, void 0, void 0, function* () {
            const router = new router_group_1.RouterGroup();
            const app = new app_1.App();
            const handler = globals_1.jest.fn().mockRejectedValue(new http_error_1.HttpError({
                name: 'Forbidden',
                message: 'You dont have access',
            }, 403));
            router.handle({
                path: '/',
                method: 'get',
                handler,
            });
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer()).get('/').expect(403);
            const errorRes = {
                message: 'You dont have access',
                name: 'Forbidden',
                status: 403,
            };
            (0, globals_1.expect)(res.body).toEqual(errorRes);
        }));
    });
});
