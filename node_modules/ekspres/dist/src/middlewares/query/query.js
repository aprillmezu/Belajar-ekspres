"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQueryMiddleware = void 0;
const kueri_1 = require("kueri");
const http_error_1 = require("../../errors/http.error");
function createQueryMiddleware() {
    return {
        forAll: (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const parsed = yield new kueri_1.QueryForAllParser().make(req.query);
                req.query = parsed;
                next();
            }
            catch (err) {
                if (err instanceof kueri_1.ValidationError) {
                    return next(new http_error_1.HttpError({
                        name: 'BadRequest',
                        message: err.message,
                    }, 400));
                }
                return next(err);
            }
        }),
        forSingle: (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const parsed = yield new kueri_1.QueryForSingleParser().make(req.query);
                req.query = parsed;
                next();
            }
            catch (err) {
                if (err instanceof kueri_1.ValidationError) {
                    return next(new http_error_1.HttpError({
                        name: 'BadRequest',
                        message: err.message,
                    }, 400));
                }
                return next(err);
            }
        }),
    };
}
exports.createQueryMiddleware = createQueryMiddleware;
