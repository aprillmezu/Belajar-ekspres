"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const app_1 = require("../../app/app");
const router_1 = require("../../router/router");
const query_1 = require("./query");
const supertest_1 = __importDefault(require("supertest"));
(0, globals_1.describe)('query', () => {
    (0, globals_1.test)('return middlewares object', () => {
        (0, globals_1.expect)(typeof query_1.createQueryMiddleware).toBe('function');
        (0, globals_1.expect)((0, query_1.createQueryMiddleware)()).toHaveProperty('forAll');
        (0, globals_1.expect)((0, query_1.createQueryMiddleware)()).toHaveProperty('forSingle');
        (0, globals_1.expect)(typeof (0, query_1.createQueryMiddleware)().forAll).toBe('function');
        (0, globals_1.expect)(typeof (0, query_1.createQueryMiddleware)().forSingle).toBe('function');
    });
    (0, globals_1.describe)('query for all', () => {
        (0, globals_1.test)('throw query error', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            router
                .setPath('/')
                .setMethod('get')
                .addMiddlewares([(0, query_1.createQueryMiddleware)().forAll])
                .handle((context) => __awaiter(void 0, void 0, void 0, function* () { return context === null || context === void 0 ? void 0 : context.query; }));
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer())
                .get('/')
                .query({ page: 'invalid' })
                .expect(400);
            const error = {
                name: 'BadRequest',
                message: 'page must be an object',
                status: 400,
            };
            (0, globals_1.expect)(res.body).toEqual(error);
        }));
        (0, globals_1.test)('return query object', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            router
                .setPath('/')
                .setMethod('get')
                .addMiddlewares([(0, query_1.createQueryMiddleware)().forAll])
                .handle((context) => __awaiter(void 0, void 0, void 0, function* () { return context === null || context === void 0 ? void 0 : context.query; }));
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer())
                .get('/')
                .query({ include: 'user,profile' })
                .expect(200);
            (0, globals_1.expect)(res.body).toEqual(globals_1.expect.objectContaining({
                include: ['user', 'profile'],
            }));
        }));
    });
    (0, globals_1.describe)('query for single', () => {
        (0, globals_1.test)('throw query error', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            router
                .setPath('/')
                .setMethod('get')
                .addMiddlewares([(0, query_1.createQueryMiddleware)().forSingle])
                .handle((context) => __awaiter(void 0, void 0, void 0, function* () { return context === null || context === void 0 ? void 0 : context.query; }));
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer())
                .get('/')
                .query({ include: [1, 2, 3] })
                .expect(400);
            const error = {
                name: 'BadRequest',
                message: 'include must be a string',
                status: 400,
            };
            (0, globals_1.expect)(res.body).toEqual(error);
        }));
        (0, globals_1.test)('return query object', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            router
                .setPath('/')
                .setMethod('get')
                .addMiddlewares([(0, query_1.createQueryMiddleware)().forSingle])
                .handle((context) => __awaiter(void 0, void 0, void 0, function* () { return context === null || context === void 0 ? void 0 : context.query; }));
            app.setRoutes([router.make()]);
            const res = yield (0, supertest_1.default)(app.getServer())
                .get('/')
                .query({ include: 'user,profile' })
                .expect(200);
            (0, globals_1.expect)(res.body).toEqual(globals_1.expect.objectContaining({
                include: ['user', 'profile'],
            }));
        }));
    });
});
