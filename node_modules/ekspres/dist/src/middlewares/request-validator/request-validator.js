"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestValidator = void 0;
const joi_1 = __importDefault(require("joi"));
const http_error_1 = require("../../errors/http.error");
const error_details_1 = require("./error-details");
function createRequestValidator(RequestClass) {
    const request = new RequestClass();
    function validate(values) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield request.schema().validateAsync(values, {
                    allowUnknown: true,
                    stripUnknown: true,
                });
            }
            catch (err) {
                if (err instanceof joi_1.default.ValidationError) {
                    throw new error_details_1.ErrorDetails(err);
                }
                throw err;
            }
        });
    }
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        try {
            req[request.path] = yield validate(req[request.path]);
            next();
        }
        catch (err) {
            if (err instanceof error_details_1.ErrorDetails) {
                return next(new http_error_1.HttpError({
                    name: 'Unprocessable Content',
                    message: 'Validation Error',
                    details: err.errors,
                }, 422));
            }
            return next(new http_error_1.HttpError({
                name: 'Unprocessable Content',
                message: 'Validation Error',
            }));
        }
    });
}
exports.createRequestValidator = createRequestValidator;
