"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const expect_1 = __importDefault(require("expect"));
const request_validator_1 = require("./request-validator");
const app_1 = require("../../app/app");
const router_1 = require("../../router/router");
const supertest_1 = __importDefault(require("supertest"));
const request_1 = require("./request");
const joi_1 = __importDefault(require("joi"));
(0, globals_1.describe)('request validator', () => {
    (0, globals_1.describe)('createRequestValidator', () => {
        (0, globals_1.test)('return handler', () => {
            class TestRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        name: joi_1.default.string().required(),
                    });
                }
            }
            (0, expect_1.default)(typeof (0, request_validator_1.createRequestValidator)(TestRequest)).toBe('function');
        });
        (0, globals_1.test)('throw 422', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            class TestRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        name: joi_1.default.string().required(),
                    });
                }
            }
            app.setRoutes([
                router
                    .setPath('/')
                    .setMethod('post')
                    .addMiddlewares([(0, request_validator_1.createRequestValidator)(TestRequest)])
                    .handle(() => __awaiter(void 0, void 0, void 0, function* () { return 'Ok'; }))
                    .make(),
            ]);
            yield (0, supertest_1.default)(app.getServer()).post('/').expect(422);
        }));
        (0, globals_1.test)('throw validation error', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            class TestRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        name: joi_1.default.string().required(),
                    });
                }
            }
            app.setRoutes([
                router
                    .setPath('/')
                    .setMethod('post')
                    .addMiddlewares([(0, request_validator_1.createRequestValidator)(TestRequest)])
                    .handle(() => __awaiter(void 0, void 0, void 0, function* () { return 'Ok'; }))
                    .make(),
            ]);
            const res = yield (0, supertest_1.default)(app.getServer()).post('/').expect(422);
            const detailsError = {
                name: '"name" is required',
            };
            (0, expect_1.default)(res.body).toHaveProperty('details');
            (0, expect_1.default)(res.body.details).toEqual(detailsError);
        }));
        (0, globals_1.test)('return validated', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            class TestRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        name: joi_1.default.string().required(),
                    });
                }
            }
            app.setRoutes([
                router
                    .setPath('/')
                    .setMethod('post')
                    .addMiddlewares([(0, request_validator_1.createRequestValidator)(TestRequest)])
                    .handle((context) => __awaiter(void 0, void 0, void 0, function* () { return context === null || context === void 0 ? void 0 : context.body; }))
                    .make(),
            ]);
            const res = yield (0, supertest_1.default)(app.getServer())
                .post('/')
                .send({
                name: 'Test',
                ignore: 'ignore',
            })
                .expect(200);
            const body = {
                name: 'Test',
            };
            (0, expect_1.default)(res.body).toEqual(body);
        }));
        (0, globals_1.test)('validate params', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            class TestRequest extends request_1.Request {
                constructor() {
                    super(...arguments);
                    this.path = 'params';
                }
                schema() {
                    return joi_1.default.object({
                        id: joi_1.default.number().required(),
                    });
                }
            }
            app.setRoutes([
                router
                    .setPath('/:id')
                    .setMethod('get')
                    .addMiddlewares([(0, request_validator_1.createRequestValidator)(TestRequest)])
                    .handle(() => __awaiter(void 0, void 0, void 0, function* () { return 'Ok'; }))
                    .make(),
            ]);
            const res = yield (0, supertest_1.default)(app.getServer()).get('/NaN').expect(422);
            const detailsError = {
                id: '"id" must be a number',
            };
            (0, expect_1.default)(res.body).toHaveProperty('details');
            (0, expect_1.default)(res.body.details).toEqual(detailsError);
        }));
    });
    (0, globals_1.describe)('Request', () => {
        (0, globals_1.test)('callable', () => {
            class CreateUserRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        email: joi_1.default.string().email().required(),
                    });
                }
            }
            (0, expect_1.default)(typeof CreateUserRequest).toBe('function');
        });
        (0, globals_1.test)('schema callable', () => {
            class CreateUserRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        email: joi_1.default.string().email().required(),
                    });
                }
            }
            (0, expect_1.default)(typeof CreateUserRequest.prototype.schema).toBe('function');
        });
        (0, globals_1.test)('throw validation error', () => __awaiter(void 0, void 0, void 0, function* () {
            const app = new app_1.App();
            const router = new router_1.Router();
            class CreateUserRequest extends request_1.Request {
                schema() {
                    return joi_1.default.object({
                        email: joi_1.default.string().email().required(),
                    });
                }
            }
            app.setRoutes([
                router
                    .setPath('/')
                    .setMethod('post')
                    .addMiddlewares([(0, request_validator_1.createRequestValidator)(CreateUserRequest)])
                    .handle(() => __awaiter(void 0, void 0, void 0, function* () { return 'Ok'; }))
                    .make(),
            ]);
            const res = yield (0, supertest_1.default)(app.getServer()).post('/').expect(422);
            const detailsError = {
                email: '"email" is required',
            };
            (0, expect_1.default)(res.body).toHaveProperty('details');
            (0, expect_1.default)(res.body.details).toEqual(detailsError);
        }));
    });
});
