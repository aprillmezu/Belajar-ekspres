"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const express_1 = require("express");
const router_error_1 = require("../errors/router.error");
class Router {
    constructor() {
        this.midllewares = [];
    }
    setPath(path) {
        this.path = path;
        return this;
    }
    setMethod(method) {
        this.method = method;
        return this;
    }
    addMiddlewares(middlewares) {
        this.midllewares = middlewares;
        return this;
    }
    handle(handler) {
        this.handler = handler;
        return this;
    }
    make() {
        if (!this.path) {
            throw new router_error_1.RouterError({
                name: 'PATH_UNSET',
                message: 'Path is unset',
            });
        }
        if (!this.method) {
            throw new router_error_1.RouterError({
                name: 'METHOD_UNSET',
                message: 'Method is unset',
            });
        }
        if (!this.handler) {
            throw new router_error_1.RouterError({
                name: 'HANDLER_UNSET',
                message: 'Handler is unset',
            });
        }
        const router = (0, express_1.Router)();
        router
            .route(this.path)[this.method](this.midllewares, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.handler({
                    body: req.body,
                    query: req.query,
                    params: req.params,
                });
                return res.json(data);
            }
            catch (err) {
                next(err);
            }
        }));
        return router;
    }
}
exports.Router = Router;
