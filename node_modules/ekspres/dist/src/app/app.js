"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const express_1 = __importDefault(require("express"));
const http_1 = require("http");
const http_error_1 = require("../errors/http.error");
class App {
    constructor() {
        this.port = 3000;
        this.middlewares = [];
        this.routes = [];
        this.app = (0, express_1.default)();
    }
    getServer() {
        var _a;
        this.setup();
        return (_a = this.server) !== null && _a !== void 0 ? _a : (0, http_1.createServer)(this.app);
    }
    listen(cb) {
        this.setup();
        this.server = this.app.listen(this.port, () => {
            if (cb) {
                cb(this.port);
            }
        });
    }
    stop() {
        this.server.close();
    }
    setup() {
        this.app.use(express_1.default.json());
        this.app.use(express_1.default.urlencoded({ extended: true }));
        this.middlewares.forEach((middleware) => this.app.use(middleware));
        this.routes.forEach((route) => this.app.use(route));
        this.setErrorHandler();
    }
    setPort(port) {
        this.port = port;
        return this;
    }
    setMiddlewares(middlewares) {
        this.middlewares = middlewares;
        return this;
    }
    setRoutes(routes) {
        this.routes = routes;
        return this;
    }
    setErrorHandler() {
        this.app.use((err, req, res, next) => {
            if (err instanceof http_error_1.HttpError) {
                const errorParsed = Object.assign({ status: err.status, message: err.message, name: err.name }, (err.details
                    ? {
                        details: err.details,
                    }
                    : {}));
                return res.status(errorParsed.status).json(errorParsed);
            }
            const errorParsed = {
                status: 500,
                name: 'Internal Server Error',
                message: err instanceof Error ? err.message : 'Internal Server Error',
            };
            return res.status(errorParsed.status).json(errorParsed);
        });
    }
}
exports.App = App;
